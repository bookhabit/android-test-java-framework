package com.example.androidtest

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.IBinder
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.core.content.ContextCompat
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch

class StepCounterService : Service() {
    
    companion object {
        private const val NOTIFICATION_ID = 1
        private const val CHANNEL_ID = "step_counter_channel"
        private const val CHANNEL_NAME = "Í±∏Ïùå Ïàò Ï∏°Ï†ï"
        private const val CHANNEL_DESCRIPTION = "Í±∏Ïùå Ïàò Ï∏°Ï†ï ÏÑúÎπÑÏä§ ÏïåÎ¶º"
        
        fun startService(context: Context) {
            val intent = Intent(context, StepCounterService::class.java)
            ContextCompat.startForegroundService(context, intent)
        }
        
        fun stopService(context: Context) {
            val intent = Intent(context, StepCounterService::class.java)
            context.stopService(intent)
        }
    }
    
    private lateinit var notificationManager: NotificationManager
    private val serviceScope = CoroutineScope(Dispatchers.Main + Job())
    
    // StepCounterManager Ïù∏Ïä§ÌÑ¥Ïä§
    private lateinit var stepCounterManager: StepCounterManager
    
    override fun onCreate() {
        super.onCreate()
        Log.d("StepCounterService", "üîß ÏÑúÎπÑÏä§ ÏÉùÏÑ±")
        
        // Ï¥àÍ∏∞Ìôî
        notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        stepCounterManager = StepCounterManager.getInstance(this, serviceScope)
        
        // ÏïåÎ¶º Ï±ÑÎÑê ÏÉùÏÑ±
        createNotificationChannel()
        
        // StepCounterManager ÏΩúÎ∞± ÏÑ§Ï†ï
        stepCounterManager.setCallback(object : StepCounterManager.StepCounterCallback {
            override fun onStepsUpdated(stepData: StepCounterManager.StepData) {
                updateNotification(
                    "Í±∏Ïùå Ïàò Ï∏°Ï†ï Ï§ë",
                    "Ïò§Îäò Í±∏ÏùåÏàò: ${stepData.todaySteps + stepData.liveSteps}Î≥¥ (+${stepData.liveSteps} Ïã§ÏãúÍ∞Ñ)"
                )
            }
            
            override fun onStepsSaved(totalSteps: Long) {
                updateNotification(
                    "Í±∏Ïùå Ïàò Ï∏°Ï†ï Ï§ë",
                    "Ïò§Îäò Í±∏ÏùåÏàò: ${totalSteps}Î≥¥"
                )
            }
            
            override fun onNewDayDetected() {
                Log.d("StepCounterService", "üåÖ ÏÉàÎ°úÏö¥ ÎÇ† Í∞êÏßÄÎê®")
            }
            
            override fun onRebootDetected() {
                Log.d("StepCounterService", "üîÑ Ïû¨Î∂ÄÌåÖ Í∞êÏßÄÎê®")
            }
        })
    }
    
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d("StepCounterService", "üöÄ ÏÑúÎπÑÏä§ ÏãúÏûë")
        
        // Foreground ServiceÎ°ú ÏãúÏûë
        val notification = createNotification("Í±∏Ïùå Ïàò Ï∏°Ï†ï Ï§ë...", "ÏÑúÎπÑÏä§Í∞Ä ÏãúÏûëÎêòÏóàÏäµÎãàÎã§.")
        startForeground(NOTIFICATION_ID, notification)
        
        // StepCounterManager Ï¥àÍ∏∞Ìôî
        serviceScope.launch {
            stepCounterManager.initialize()
        }
        
        return START_STICKY // ÏÑúÎπÑÏä§Í∞Ä Ï¢ÖÎ£åÎêòÎ©¥ ÏûêÎèôÏúºÎ°ú Ïû¨ÏãúÏûë
    }
    
    override fun onBind(intent: Intent?): IBinder? = null
    
    override fun onDestroy() {
        super.onDestroy()
        Log.d("StepCounterService", "üõë ÏÑúÎπÑÏä§ Ï¢ÖÎ£å")
        stepCounterManager.unregisterSensor()
    }
    
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = CHANNEL_DESCRIPTION
                setShowBadge(false)
            }
            notificationManager.createNotificationChannel(channel)
        }
    }
    
    private fun createNotification(title: String, content: String): Notification {
        val intent = Intent(this, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }
        val pendingIntent = PendingIntent.getActivity(
            this, 0, intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle(title)
            .setContentText(content)
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .setContentIntent(pendingIntent)
            .setOngoing(true) // ÏÇ¨Ïö©ÏûêÍ∞Ä Ïä§ÏôÄÏù¥ÌîÑÎ°ú Ï†úÍ±∞Ìï† Ïàò ÏóÜÏùå
            .setPriority(NotificationCompat.PRIORITY_LOW)
            .setCategory(NotificationCompat.CATEGORY_SERVICE)
            .build()
    }
    
    private fun updateNotification(title: String, content: String) {
        val notification = createNotification(title, content)
        notificationManager.notify(NOTIFICATION_ID, notification)
    }
}